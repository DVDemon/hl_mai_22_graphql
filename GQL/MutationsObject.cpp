// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "MutationsObject.h"

#include "graphqlservice/internal/Schema.h"

#include "graphqlservice/introspection/IntrospectionSchema.h"

#include <algorithm>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::database {
namespace object {

Mutations::Mutations(std::unique_ptr<const Concept>&& pimpl) noexcept
	: service::Object{ getTypeNames(), getResolvers() }
	, _pimpl { std::move(pimpl) }
{
}

service::TypeNames Mutations::getTypeNames() const noexcept
{
	return {
		R"gql(Mutations)gql"sv
	};
}

service::ResolverMap Mutations::getResolvers() const noexcept
{
	return {
		{ R"gql(addAuthor)gql"sv, [this](service::ResolverParams&& params) { return resolveAddAuthor(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } }
	};
}

void Mutations::beginSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->beginSelectionSet(params);
}

void Mutations::endSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->endSelectionSet(params);
}

service::AwaitableResolver Mutations::resolveAddAuthor(service::ResolverParams&& params) const
{
	auto argFirst_name = service::ModifiedArgument<std::string>::require("first_name", params.arguments);
	auto argLast_name = service::ModifiedArgument<std::string>::require("last_name", params.arguments);
	auto argEmail = service::ModifiedArgument<std::string>::require("email", params.arguments);
	auto argTitle = service::ModifiedArgument<std::string>::require("title", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->applyAddAuthor(service::FieldParams(service::SelectionSetParams{ params }, std::move(directives)), std::move(argFirst_name), std::move(argLast_name), std::move(argEmail), std::move(argTitle));
	resolverLock.unlock();

	return service::ModifiedResult<std::string>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver Mutations::resolve_typename(service::ResolverParams&& params) const
{
	return service::Result<std::string>::convert(std::string{ R"gql(Mutations)gql" }, std::move(params));
}

} // namespace object

void AddMutationsDetails(const std::shared_ptr<schema::ObjectType>& typeMutations, const std::shared_ptr<schema::Schema>& schema)
{
	typeMutations->AddFields({
		schema::Field::Make(R"gql(addAuthor)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(String)gql"sv)), {
			schema::InputValue::Make(R"gql(first_name)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(String)gql"sv)), R"gql()gql"sv),
			schema::InputValue::Make(R"gql(last_name)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(String)gql"sv)), R"gql()gql"sv),
			schema::InputValue::Make(R"gql(email)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(String)gql"sv)), R"gql()gql"sv),
			schema::InputValue::Make(R"gql(title)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(String)gql"sv)), R"gql()gql"sv)
		})
	});
}

} // namespace graphql::database
