// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "GQLObjects.h"

#include "graphqlservice/introspection/Introspection.h"

#include <algorithm>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::database {
namespace object {

Author::Author()
	: service::Object({
		"Author"
	}, {
		{ R"gql(id)gql"sv, [this](service::ResolverParams&& params) { return resolveId(std::move(params)); } },
		{ R"gql(email)gql"sv, [this](service::ResolverParams&& params) { return resolveEmail(std::move(params)); } },
		{ R"gql(title)gql"sv, [this](service::ResolverParams&& params) { return resolveTitle(std::move(params)); } },
		{ R"gql(last_name)gql"sv, [this](service::ResolverParams&& params) { return resolveLast_name(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } },
		{ R"gql(first_name)gql"sv, [this](service::ResolverParams&& params) { return resolveFirst_name(std::move(params)); } }
	})
{
}

service::FieldResult<std::optional<response::IntType>> Author::getId(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Author::getId is not implemented)ex");
}

std::future<service::ResolverResult> Author::resolveId(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getId(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::IntType>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::FieldResult<response::StringType> Author::getFirst_name(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Author::getFirst_name is not implemented)ex");
}

std::future<service::ResolverResult> Author::resolveFirst_name(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getFirst_name(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::StringType>::convert(std::move(result), std::move(params));
}

service::FieldResult<response::StringType> Author::getLast_name(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Author::getLast_name is not implemented)ex");
}

std::future<service::ResolverResult> Author::resolveLast_name(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getLast_name(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::StringType>::convert(std::move(result), std::move(params));
}

service::FieldResult<response::StringType> Author::getEmail(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Author::getEmail is not implemented)ex");
}

std::future<service::ResolverResult> Author::resolveEmail(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getEmail(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::StringType>::convert(std::move(result), std::move(params));
}

service::FieldResult<response::StringType> Author::getTitle(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Author::getTitle is not implemented)ex");
}

std::future<service::ResolverResult> Author::resolveTitle(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getTitle(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::StringType>::convert(std::move(result), std::move(params));
}

std::future<service::ResolverResult> Author::resolve_typename(service::ResolverParams&& params)
{
	return service::ModifiedResult<response::StringType>::convert(response::StringType{ R"gql(Author)gql" }, std::move(params));
}

} // namespace object

void AddAuthorDetails(std::shared_ptr<schema::ObjectType> typeAuthor, const std::shared_ptr<schema::Schema>& schema)
{
	typeAuthor->AddFields({
		schema::Field::Make(R"gql(id)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType("Int")),
		schema::Field::Make(R"gql(first_name)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType("String"))),
		schema::Field::Make(R"gql(last_name)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType("String"))),
		schema::Field::Make(R"gql(email)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType("String"))),
		schema::Field::Make(R"gql(title)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType("String")))
	});
}

} // namespace graphql::database
